{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"i": {
		"prefix": "?i",
		"body": [
			"n=int(input())",
		],
		"description": "i"
	},
	"ii": {
		"prefix": "?ii",
		"body": [
			"a,b=list(map(int, input().split()))",
		],
		"description": "ii"
	},
	"il": {
		"prefix": "?il",
		"body": [
			"al=list(map(int, input().split()))",
		],
		"description": "il"
	},
	"ill": {
		"prefix": "?ill",
		"body": [
			"al = [0] * n",
			"bl = [0] * n",
			"for i in range(n):",
			"    al[i], bl[i] = map(int, input().split())",
		],
		"description": "ill"
	},
	"tyokuseki": {
		"prefix": "?tyokuseki",
		"body": [
			"from itertools import product",
			"for x, y, z in product([1, -1], repeat=3):",
			"	print(x,y,z)",
		],
		"description": "直積列挙"
	},
	"tyuuouti": {
		"prefix": "?tyuuouti",
		"body": [
			"import statistics",
			"median = statistics.median(l_even)",
			"median_low = statistics.median_low(l_even)",
			"median_high = statistics.median_high(l_even)",
		],
		"description": "中央値"
	},
	"ceil": {
		"prefix": "?ceil",
		"body": [
			"def ceil(a, b):",
			"	return -(-a // b)",
			"$1"
		],
		"description": "a,bの切り上げ割り算"
	},
	"gcd": {
		"prefix": "?gcd",
		"body": [
			"#a,bの最大公約数",
			"def gcd(a, b):",
			"	while b:",
			"		a, b = b, a % b",
			"	return a",
			"$1"
		],
		"description": "gcd"
	},
	"lcm": {
		"prefix": "?lcm",
		"body": [
			"#a,bの最大公約数",
			"def gcd(a, b):",
			"	while b:",
			"		a, b = b, a % b",
			"	return a"
			"",
			"#a,bの最小公倍数",
			"def lcm(a, b):",
			"	return a * b // gcd (a, b)",
			"$1"
		],
		"description": "lcm"
	},
	"codeforces": {
		"prefix": "?codeforces",
		"body": [
			"def case():",
			"    n = int(input())",
			"    al = list(map(int, input().split()))",
			"",
			"t = int(input())",
			"for _ in range(t):",
			"    case()",
		],
		"description": "lcm"
	},
	"yakusuu": {
		"prefix": "?yakusuu",
		"body": [
			"def make_divisors(n):",
			"	divisors = []",
			"	for i in range(1, int(n**0.5)+1):",
			"		if n % i == 0:",
			"			divisors.append(i)",
			"			if i != n // i:",
			"				divisors.append(n//i)",
		
			"	# divisors.sort()",
			"	return divisors",
			"$1"
		],
		"description": "yakusuu"
	},
	"soinsu": {
		"prefix": "?soinsu",
		"body": [
			"# nを素因数分解",
			"# 2以上の整数n => [[素因数, 指数], ...]の2次元リスト",
			"def factorization(n):",
			"	arr = []",
			"	temp = n",
			"	for i in range(2, int(-(-n**0.5 // 1))+1):",
			"		if temp % i == 0:",
			"			cnt = 0",
			"			while temp % i == 0:",
			"				cnt += 1",
			"				temp //= i",
			"			arr.append([i, cnt])",
			"	if temp != 1:",
			"		arr.append([temp, 1])",
			"	if arr == []:",
			"		arr.append([n, 1])",
			"	return arr",
		],
		"description": "soinsu"
	},
	"sosu": {
		"prefix": "?sosu",
		"body": [
			"import math",
			"def is_prime(n):",
			"    if n == 1:",
			"        return False",
			"",
			"    for k in range(2, int(math.sqrt(n)) + 1):",
			"        if n % k == 0:",
			"            return False",
			"",
			"    return True",
		],
		"description": "ある数が素数かどうか判定"
	},
	"era_sosu_rekkyo": {
		"prefix": "?era_sosu_rekkyo",
		"body": [
			"from math import ceil, sqrt",
			"def era_prime(N):",
			"    temp = [True]*(N+1)",
			"    temp[0] = temp[1] = False",
			"    for i in range(2, ceil(sqrt(N+1))):",
			"        if temp[i]:",
			"            temp[i+i::i] = [False]*(len(temp[i+i::i]))",
			"    primes = [n for n in range(N+1) if temp[n]]",
			"    return primes",
		],
		"description": "素数列挙"
	},
	"bitall": {
		"prefix": "?bitall",
		"body": [
			"from itertools import product",
			"for bit in product([0, 1], repeat=20):",
			"	print(bit)",
		],
		"description": "bitall"
	},
	"ncm": {
		"prefix": "?combination_mod",
		"body": [
			"def comb(n, k, p):    # power_funcを用いて(nCk) mod p を求める",
			"    from math import factorial",
			"    if n < 0 or k < 0 or n < k:",
			"        return 0",
			"    if n == 0 or k == 0:",
			"        return 1",
			"    a = factorial(n) % p",
			"    b = factorial(k) % p",
			"    c = factorial(n-k) % p",
			"    return (a*power_func(b, p-2, p)*power_func(c, p-2, p)) % p",
			"",
			"",
			"def power_func(a, b, p):",
			"    # ^b mod p を求める",
			"    if b == 0:",
			"        return 1",
			"    if b % 2 == 0:",
			"        d = power_func(a, b//2, p)",
			"        return d*d % p",
			"    if b % 2 == 1:",
			"        return (a*power_func(a, b-1, p)) % p"
		],
		"description": "nCr % mod(はやい)"
	},
	"combination_mod_pre": {
		"prefix": "?combination_mod_pre",
		"body": [
			"def cmb(n, r, p):",
			"    if (r < 0) or (n < r):",
			"        return 0",
			"    r = min(r, n - r)",
			"    return fact[n] * factinv[r] * factinv[n-r] % p",
			"",
			"",
			"p = 998244353",
			"N = 10 ** 6  # N は必要分だけ用意する",
			"fact = [1, 1]",
			"factinv = [1, 1]",
			"inv = [0, 1]",
			"",
			"for i in range(2, N + 1):",
			"    fact.append((fact[-1] * i) % p)",
			"    inv.append((-inv[p % i] * (p // i)) % p)",
			"    factinv.append((factinv[-1] * inv[-1]) % p)"
		],
		"description": "nCr % mod(はやい)"
	},
	"hw": {
		"prefix": "?hw",
		"body": [
			"h, w = list(map(int, input().split()))",
			"s = [list(map(str, list(input()))) for i in range(h)]",
			"for i in range(h):",
			"    for j in range(w):",
			"        if s[i][j] == '#':"
		],
		"description": "nCr % mod(はやい)"
	},
	"bekijou": {
		"prefix": "?bekijou_mod",
		"body": [
			"# a^x mod n : ans = pow_by_binary_exponentiation(2, 1000, 10**9+7)",
			"def pow_by_binary_exponentiation(a, x, n):",
			"    def binary(n):",
			"        return bin(n)[2:]",
			"    x = [int(b) for b in binary(x)]",
			"    y = a",
			"    for i in range(1, len(x)):",
			"        y = (y**2) % n",
			"        if x[i] == 1:",
			"            y = (y * a) % n",
			"    return y",
		],
		"description": "累乗ruijouべき乗bekijouの計算 a^x mod n(はやい)"
	},
	"nibuntansaku_list": {
		"prefix": "?nibuntansaku_list",
		"body": [
			"import bisect",
			"$1"
			"#ソートされたリストAにソートを崩さずに値xを挿入するとき、xの入るべきインデックスを返す。",
			"bisect.bisect(A,x)",
			"#リストAに値xを入れ、xが複数になるとき、一番左の値xのインデックスを返す",
			"bisect.bisect_left(A,x)",
			"#リストAに値xを入れ、xが複数になるとき、一番右の値xのインデックスを返す",
			"bisect.bisect_right(A,x)",
		],
		"description": "リストの二分探索"
	},
	"nibuntansaku_lbub": {
		"prefix": "?nibuntansaku_lbub",
		"body": [
			"# ubとlbは余裕を持って大きく（小さく）取っておく",
			"ub = 99999999",
			"lb = -1",
			"while lb + 1 < ub:",
			"    target = (ub+lb)//2",
			"    if (条件):",
			"        lb = target",
			"    else:",
			"        ub = target",
			"print(lb)",
			"print(ub)"
		],
		"description": "リストの二分探索"
	},
	"sannbuntansaku_lbub": {
		"prefix": "?sannbuntansaku_lbub",
		"body": [
			"# ubとlbは余裕を持って大きく（小さく）取っておく",
			"ub = 99999999",
			"lb = -1",
			"while ub - lb > 0.000000001:",
			"    mid_left = ub / 3+lb*2/3",
			"    mid_right = ub * 2/3+lb/3",
			"    if f(mid_left) >= f(mid_right):",
			"        lb = mid_left",
			"    else:",
			"        ub = mid_right"
		],
		"description": "凸関数の最適値を求めるときに使う３分探索"
	},
	"unionfind": {
		"prefix": "?unionfind",
		"body": [
			"class UnionFind():"
			"	def __init__(self, n):",
			"		self.n = n",
			"		self.parents = [-1] * n",
			"",
			"	def find(self, x):",
			"		if self.parents[x] < 0:",
			"			return x",
			"		else:",
			"			self.parents[x] = self.find(self.parents[x])",
			"			return self.parents[x]",
			"",
			"	def union(self, x, y):",
			"		x = self.find(x)",
			"		y = self.find(y)",
			"",
			"		if x == y:",
			"			return",
			"",
			"		if self.parents[x] > self.parents[y]:",
			"			x, y = y, x",
			"",
			"		self.parents[x] += self.parents[y]",
			"		self.parents[y] = x",
			"",
			"	def size(self, x):",
			"		return -self.parents[self.find(x)]",
			"",
			"	def same(self, x, y):",
			"		return self.find(x) == self.find(y)",
			"",
			"	def members(self, x):",
			"		root = self.find(x)",
			"		return [i for i in range(self.n) if self.find(i) == root]",
			"",
			"	def roots(self):",
			"		return [i for i, x in enumerate(self.parents) if x < 0]",
			"",
			"	def group_count(self):",
			"		return len(self.roots())",
			"",
			"    def all_group_members(self):",
			"        from collections import defaultdict",
			"        d = defaultdict(lambda: [])",
			"        for i in range(self.n):",
			"            tt = self.find(i)",
			"            d[tt].append(i)",
			"        return d",
			"",
			"	def __str__(self):",
			"		return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())",
			"",
			"uf = UnionFind(n)"
		],
		"description": "unionfind"
	},
	"warshall": {
		"prefix": "?warshall",
		"body": [
			"#d[i][j]は2頂点間i, j間の移動コストを格納, Vは頂点数",
			"def warshall_floyd(d, V): ",
			"	for k in range(V):",
			"		for i in range(V):",
			"			for j in range(V):",
			"				d[i][j] = min(d[i][j], d[i][k] + d[k][j])",
			"",
			"	return d #d[i][j]に頂点i, j間の最短距離を格納",
			"$1"
		],
		"description": "warshall"
	},
	"for_i_in_range": {
		"prefix": "?frange",
		"body": [
			"for $1 in range($2):",
			"	$3"
		],
		"description": "for X in range(Y)"
	},
	"median": {
		"prefix": "?median",
		"body": [
			"#pypy3ではなくpython3で提出 偶数リストの場合は平均値（少数点ありうる）が出るので注意",
			"import statistics",
			"$1 = statistics.median($2)",
			"$3"
		],
		"description": "median"
	},
	"inf": {
		"prefix": "?inf",
		"body": [
			"INF = float(\"inf\")",
		],
		"description": "正しい無限INF"
	},
	"defaultdict": {
		"prefix": "?defaultdict",
		"body": [
			"from collections import defaultdict",
			"d = defaultdict(lambda: 1)",
			"for key, value in d.items():"
		],
		"description": "inf"
	},
	"permutations": {
		"prefix": "?permutations_list",
		"body": [
			"import itertools",
			"for p in itertools.permutations(['M', 'A', 'R', 'C', 'H'], 3):",
			"	# p:tuple",
		],
		"description": "全部の順列組み合わせを出力"
	},
	"permutations2": {
		"prefix": "?permutations",
		"body": [
			"import math",
			"$1 = math.factorial(n)",
		],
		"description": "全部の順列組み合わせを出力"
	},
	"ruisekiwa": {
		"prefix": "?ruisekiwa",
		"body": [
			"import itertools",
			"rui_al = [0] + list(itertools.accumulate(al))",
		],
		"description": "累積和"
	},
	"combination": {
		"prefix": "?combination_list",
		"body": [
			"import itertools",
			"$1 = list(itertools.combinations(['M', 'A', 'R', 'C', 'H'], 3))",
		],
		"description": "ans"
	},
	"heapq": {
		"prefix": "?heapq",
		"body": [
			"import heapq",
			"heap = []",
			"heapq.heappush(heap, 1)",
			"heapq.heappop(heap)",
		],
		"description": "ans"
	},
	"yes": {
		"prefix": "?yes",
		"body": [
			"print('Yes')",
		],
		"description": "yes"
	},
	"print": {
		"prefix": "?p",
		"body": [
			"print($0)",
		],
		"description": "print"
	},
	"no": {
		"prefix": "?no",
		"body": [
			"print('No')",
		],
		"description": "No"
	},
	"yesno": {
		"prefix": "?yn",
		"body": [
			"if $1:",
			"    print('Yes')",
			"else:",
			"    print('No')"
		],
		"description": "No"
	},
	"ans": {
		"prefix": "?ans",
		"body": [
			"print(ans)",
		],
		"description": "ans"
	},
	"combination_simple": {
		"prefix": "?combination_simple",
		"body": [
			"def cmb(n, r):",
			"    if n - r < r:",
			"        r = n - r",
			"    if r == 0:",
			"        return 1",
			"    if r == 1:",
			"        return n",
			"",
			"    numerator = [n - r + k + 1 for k in range(r)]",
			"    denominator = [k + 1 for k in range(r)]",
			"",
			"    for p in range(2, r+1):",
			"        pivot = denominator[p - 1]",
			"        if pivot > 1:",
			"            offset = (n - r) % p",
			"            for k in range(p-1, r, p):",
			"                numerator[k - offset] /= pivot",
			"                denominator[k] /= pivot",
			"",
			"    result = 1",
			"    for k in range(r):",
			"        if numerator[k] > 1:",
			"            result *= int(numerator[k])",
			"",
			"    return result",
		],
		"description": "combination_simple"
	},
	"bfs": {
		"prefix": "?bfs",
		"body": [
			"from collections import defaultdict, deque",
			"# N: 頂点数",
			"# G[v]: 頂点vに隣接する頂点list",
			"N = int(input())",
			"G = defaultdict(lambda: [])",
			"",
			"for i in range(N-1):",
			"    a, b = list(map(int, input().split()))",
			"    G[a-1].append(b-1)",
			"    G[b-1].append(a-1)",
			"",
			"dist = [-1]*N",
			"que = deque([0])",
			"dist[0] = 0",
			"while que:",
			"    v = que.popleft()",
			"    d = dist[v]",
			"    for w in G[v]:",
			"        if dist[w] > -1:",
			"            continue",
			"        dist[w] = d + 1",
			"        que.append(w)",
			"print(dist)",
		],
		"description": "bfs"
	},
}
